{
  "name": "core",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "pkgs/core/src",
  "projectType": "library",
  "tags": [],
  "namedInputs": {
    "schemas": ["{projectRoot}/schemas/**/*.sql"],
    "migrations": ["{projectRoot}/supabase/migrations/**/*.sql"],
    "atlasSetup": [
      "{projectRoot}/atlas.hcl",
      "{projectRoot}/Dockerfile.atlas",
      "{projectRoot}/supabase/migrations/atlas.sum",
      "{projectRoot}/scripts/atlas-verify-schemas-synced"
    ],
    "atlasVerificationCache": [
      "{projectRoot}/.nx-inputs/verify-schemas-synced.txt"
    ],
    "migrationVerificationCache": [
      "{projectRoot}/.nx-inputs/verify-migrations.txt"
    ],
    "databaseTypes": ["{projectRoot}/src/database-types.ts"]
  },
  "targets": {
    "verify-schemas-synced": {
      "executor": "nx:run-commands",
      "inputs": [
        "schemas",
        "migrations",
        "atlasSetup",
        "atlasVerificationCache"
      ],
      "outputs": ["{projectRoot}/.nx-inputs/verify-schemas-synced.txt"],
      "options": {
        "cwd": "{projectRoot}",
        "commands": [
          "mkdir -p .nx-inputs",
          "scripts/atlas-verify-schemas-synced > .nx-inputs/verify-schemas-synced.txt 2>&1 || (cat .nx-inputs/verify-schemas-synced.txt && exit 1)"
        ],
        "parallel": false
      },
      "cache": true
    },
    "verify-migrations": {
      "executor": "nx:run-commands",
      "dependsOn": ["verify-schemas-synced", "supabase:ensure-started"],
      "inputs": ["migrationVerificationCache"],
      "outputs": ["{projectRoot}/.nx-inputs/verify-migrations.txt"],
      "options": {
        "cwd": "{projectRoot}",
        "commands": [
          "mkdir -p .nx-inputs",
          "supabase db reset > .nx-inputs/verify-migrations.txt 2>&1 || (cat .nx-inputs/verify-migrations.txt && exit 1)"
        ],
        "parallel": false
      },
      "cache": true
    },
    "build": {
      "executor": "@nx/js:tsc",
      "dependsOn": ["gen-types"],
      "inputs": ["databaseTypes"],
      "options": {
        "outputPath": "pkgs/core/dist",
        "main": "pkgs/core/src/index.ts",
        "tsConfig": "pkgs/core/tsconfig.lib.json",
        "assets": [
          "pkgs/core/*.md",
          {
            "input": "pkgs/core/supabase/migrations",
            "glob": "**/*.sql",
            "output": "supabase/migrations"
          }
        ],
        "rootDir": "pkgs/core/src"
      }
    },
    "jsr:publish": {
      "executor": "nx:run-commands",
      "outputs": ["{workspaceRoot}/pkgs/core/"],
      "options": {
        "cwd": "pkgs/core",
        "commands": ["jsr publish"],
        "parallel": false
      }
    },
    "lint:sqruff": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": [
          "sqruff --config=../../.sqruff lint --parsing-errors schemas/"
        ],
        "inputs": ["schemas", "sqruffConfig"],
        "parallel": false
      }
    },
    "lint": {
      "executor": "nx:noop",
      "dependsOn": ["lint:sqruff"]
    },
    "fix-sql": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": [
          "sqruff --config=../../.sqruff fix --force --parsing-errors schemas/"
        ],
        "inputs": ["schemas", "sqruffConfig"],
        "parallel": false
      }
    },
    "supabase:ensure-started": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": [
          "supabase status || (echo \"Starting Supabase...\" && supabase start)"
        ],
        "parallel": false
      }
    },
    "supabase:start": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["supabase start"],
        "parallel": false
      }
    },
    "supabase:stop": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["supabase stop --no-backup"],
        "parallel": false
      }
    },
    "supabase:status": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["supabase status"],
        "parallel": false
      }
    },
    "supabase:restart": {
      "executor": "nx:run-commands",
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["supabase stop --no-backup", "supabase start"],
        "parallel": false
      }
    },
    "supabase:reset": {
      "executor": "nx:run-commands",
      "dependsOn": ["supabase:ensure-started"],
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["supabase db reset"],
        "parallel": false
      }
    },
    "test": {
      "executor": "nx:noop",
      "dependsOn": ["test:pgtap", "test:vitest"]
    },
    "test:pgtap": {
      "executor": "nx:run-commands",
      "dependsOn": ["verify-migrations", "supabase:ensure-started"],
      "options": {
        "cwd": "{projectRoot}",
        "commands": ["scripts/run-test-with-colors"],
        "parallel": false
      }
    },
    "test:vitest": {
      "executor": "@nx/vite:test",
      "outputs": ["{workspaceRoot}/coverage/{projectRoot}"],
      "options": {
        "passWithNoTests": true,
        "reportsDirectory": "{workspaceRoot}/coverage/{projectRoot}"
      }
    },
    "test:pgtap:watch": {
      "executor": "nx:run-commands",
      "dependsOn": ["verify-migrations", "supabase:ensure-started"],
      "options": {
        "cwd": "{projectRoot}",
        "command": "scripts/watch-test"
      },
      "cache": false
    },
    "gen-types": {
      "executor": "nx:run-commands",
      "dependsOn": ["verify-migrations"],
      "inputs": ["migrations"],
      "outputs": ["{projectRoot}/src/database-types.ts"],
      "options": {
        "commands": [
          "echo 'Generating database types...'",
          "supabase gen types --local --schema pgflow --schema pgmq > src/database-types.ts",
          "echo 'Verifying generated types...'",
          "grep -q 'pgflow' src/database-types.ts || (echo 'ERROR: Generated types file does not contain pgflow schema!' && exit 1)",
          "[ -s src/database-types.ts ] || (echo 'ERROR: Generated types file is empty!' && exit 1)"
        ],
        "cwd": "{projectRoot}",
        "parallel": false
      },
      "cache": true
    }
  }
}
