{
  "permissions": {
    "allow": [
      "Bash(./scripts/atlas-migrate-diff:*)",
      "Bash(./scripts/atlas-migrate-hash:*)",
      "Bash(./scripts/run-test-with-colors:*)",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 50422 -U postgres -d postgres -c:*)",
      "Bash(bin/run-test-with-colors:*)",
      "Bash(cat:*)",
      "Bash(cd:*)",
      "Bash(deno test:*)",
      "Bash(find:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(git rm:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm eslint:*)",
      "Bash(pnpm nx build:*)",
      "Bash(pnpm nx lint:*)",
      "Bash(pnpm nx run:*)",
      "Bash(pnpm nx supabase:*)",
      "Bash(pnpm nx supabase:reset:*)",
      "Bash(pnpm nx supabase:start:*)",
      "Bash(pnpm nx supabase:status:*)",
      "Bash(pnpm nx supabase:stop:*)",
      "Bash(pnpm nx test:*)",
      "Bash(pnpm nx test:pgtap:*)",
      "Bash(pnpm nx typecheck:*)",
      "Bash(pnpm nx verify-migrations:*)",
      "Bash(pnpm nx verify-schemas-synced:*)",
      "Bash(pnpm vitest run:*)",
      "Bash(pnpm vitest:*)",
      "Bash(psql:*)",
      "Bash(rg:*)",
      "Bash(scripts/ask-ai:*)",
      "Bash(scripts/run-test-with-colors:*)",
      "Bash(scripts/supabase:*)",
      "Bash(tree:*)",
      "Bash(vim:*)",
      "mcp__context7__get-library-docs",
      "mcp__context7__resolve-library-id",
      "mcp__crawl4ai-sse__crawl",
      "mcp__crawl4ai-sse__md",
      "mcp__graphite__learn_gt",
      "mcp__nx-mcp__nx_available_plugins",
      "mcp__nx-mcp__nx_docs",
      "mcp__nx-mcp__nx_project_details",
      "mcp__nx-mcp__nx_workspace",
      "mcp__nx-mcp__nx_workspace_path",
      "mcp__sequentialthinking__sequentialthinking"
    ],
    "deny": []
  },
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": 300000,
    "BASH_MAX_TIMEOUT_MS": 600000
  },
  "enabledMcpjsonServers": [
    "context7",
    "crawl4ai-sse",
    "nx-mcp",
    "sequentialthinking"
  ]
}
