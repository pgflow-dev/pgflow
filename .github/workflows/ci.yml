# CI workflow - build and deploy pattern
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
      - '!changeset-release/**'

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

permissions:
  actions: read
  contents: read

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. BUILD ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: '1.45.2'

      - name: Install sqruff
        uses: quarylabs/install-sqruff-cli-action@main

      - name: Setup Atlas
        uses: ariga/setup-atlas@master
        with:
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: üöÄ Run Nx affected (lint, typecheck, test)
        run: npx nx-cloud record -- pnpm exec nx affected -t lint typecheck test

      # Build for preview (PRs)
      - name: üî® Build playground for preview
        if: github.event_name == 'pull_request'
        run: npx nx-cloud record -- pnpm exec nx run playground:build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.DEMO_PREVIEW_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.DEMO_PREVIEW_SUPABASE_ANON_KEY }}

      - name: Upload playground preview artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: playground-dist-preview
          path: |
            examples/playground/.next
            examples/playground/app
            examples/playground/components
            examples/playground/lib
            examples/playground/utils
            examples/playground/types
            examples/playground/public
            examples/playground/package.json
            examples/playground/next.config.ts
            examples/playground/netlify.toml
            examples/playground/tsconfig.json
            examples/playground/tailwind.config.ts
            examples/playground/postcss.config.js
            examples/playground/middleware.ts
          retention-days: 1

      # Build for production (main branch)
      - name: üî® Build playground for production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: npx nx-cloud record -- pnpm exec nx run playground:build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.DEMO_PRODUCTION_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.DEMO_PRODUCTION_SUPABASE_ANON_KEY }}

      - name: Upload playground production artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: playground-dist-production
          path: |
            examples/playground/.next
            examples/playground/app
            examples/playground/components
            examples/playground/lib
            examples/playground/utils
            examples/playground/types
            examples/playground/public
            examples/playground/package.json
            examples/playground/next.config.ts
            examples/playground/netlify.toml
            examples/playground/tsconfig.json
            examples/playground/tailwind.config.ts
            examples/playground/postcss.config.js
            examples/playground/middleware.ts
          retention-days: 1

      # Build other affected projects (without environment-specific vars)
      - name: üöÄ Build remaining affected projects
        run: npx nx-cloud record -- pnpm exec nx affected -t build --exclude=playground

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. DEPLOY PREVIEW (Pull Requests) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-preview-website:
    name: 'Deploy Preview: Website'
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # allow writing PR comments
    environment: preview
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy Preview for website
        run: pnpm exec nx run website:deploy:preview
        env:
          CLOUDFLARE_BRANCH: pr-${{ github.event.pull_request.number }}

      - name: Comment deployment status on PR
        if: always()
        uses: mshick/add-pr-comment@v2
        with:
          message-id: preview-deployment-website
          refresh-message-position: true
          message-success: |
            ## üîç Preview Deployment: website

            ‚úÖ **Deployment successful!**

            üîó **Preview URL**: https://pr-${{ github.event.pull_request.number }}.pgflow.pages.dev

            üìù **Details**:
            - Site: `website`
            - PR: #${{ github.event.pull_request.number }}
            - Branch: `${{ github.head_ref }}`
            - Workflow: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            _Last updated: ${{ github.event.head_commit.timestamp }}_
          message-failure: |
            ## üîç Preview Deployment: website

            ‚ùå **Deployment failed!**

            üìù **Details**:
            - Site: `website`
            - PR: #${{ github.event.pull_request.number }}
            - Branch: `${{ github.head_ref }}`
            - Error: Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            _Last updated: ${{ github.event.head_commit.timestamp }}_

  deploy-preview-playground:
    name: 'Deploy Preview: Playground'
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # allow writing PR comments
    environment: preview
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
    steps:
      - name: Create playground directory
        run: mkdir -p examples/playground

      - name: Download playground build artifact
        uses: actions/download-artifact@v4
        with:
          name: playground-dist-preview
          path: examples/playground

      - name: Deploy to Netlify
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: ./examples/playground
          production-deploy: false
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.pull_request.number }}"
          alias: pr-${{ github.event.pull_request.number }}
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          github-deployment-environment: preview-playground
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 10

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. DEPLOY PRODUCTION (Main branch) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-production-website:
    name: 'Deploy Production: Website'
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production # enables manual approval & secret scoping
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy website to Production
        run: pnpm exec nx run website:deploy

  deploy-production-playground:
    name: 'Deploy Production: Playground'
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production # enables manual approval & secret scoping
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
    steps:
      - name: Create playground directory
        run: mkdir -p examples/playground

      - name: Download playground build artifact
        uses: actions/download-artifact@v4
        with:
          name: playground-dist-production
          path: examples/playground

      - name: Debug - List playground directory structure
        run: |
          echo "=== Contents of examples/playground ==="
          ls -la examples/playground/
          echo ""
          echo "=== Contents of .next directory ==="
          ls -la examples/playground/.next/ || echo ".next directory not found"
          echo ""
          echo "=== Contents of .next/static directory ==="
          ls -la examples/playground/.next/static/ || echo ".next/static directory not found"
          echo ""
          echo "=== Check for netlify.toml ==="
          cat examples/playground/netlify.toml || echo "netlify.toml not found"

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: ./examples/playground
          production-deploy: true
          deploy-message: "Deploy from GitHub Actions - Production"
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
        timeout-minutes: 10
