name: CI
on:
  pull_request:
    branches: ['**', '!changeset-release/**']
  push:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  pull-requests: write       # for preview comments
  deployments: write         # Netlify action needs it

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CLOUDFLARE_API_TOKEN:     ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID:    ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
# ─────────────────────────────────────── 1. BUILD ──────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      playground-built: ${{ steps.playground_build.outputs.built }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: pnpm/action-setup@v4
        with: { version: '8.14.1' }

      # Cache pnpm store
      - uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: '1.45.2'

      - name: Install sqruff
        uses: quarylabs/install-sqruff-cli-action@main

      - name: Setup Atlas
        uses: ariga/setup-atlas@master
        with:
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

      - name: Pre-pull Docker images
        run: |
          docker pull jumski/postgres-15-pgmq:latest || true
          docker pull supabase/postgres:15.1.0.117 || true
          docker pull supabase/gotrue:v2.132.3 || true
          docker pull supabase/postgrest:v11.2.0 || true
          docker pull supabase/realtime:v2.25.50 || true
          docker pull supabase/storage-api:v0.46.4 || true
          docker pull supabase/edge-runtime:v1.29.1 || true
          docker pull supabase/studio:20240122-5cf8f30 || true
          docker pull supabase/postgres-meta:v0.77.2 || true
          docker pull supabase/logflare:1.4.0 || true
          docker pull timberio/vector:0.28.1-alpine || true
          docker pull supabase/supavisor:1.1.56 || true

      - run: pnpm install --frozen-lockfile

      - name: Set Nx SHAs for affected commands
        uses: nrwl/nx-set-shas@v4

      - name: Quality gate (lint + typecheck + test)
        run: pnpm nx affected -t lint typecheck test --parallel --configuration=production

      - name: Build all affected projects (except playground)
        run: pnpm nx affected -t build --configuration=production --parallel --exclude=playground

      # ── playground build with env vars ────────────────────────────────────────
      - name: Build playground
        id: playground_build
        if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          # Check if playground is affected
          if pnpm nx show projects --affected --plain | grep -qx "playground"; then
            echo "Playground is affected, building..."
            
            # Set environment variables based on event type
            export NEXT_PUBLIC_SUPABASE_URL=${{ github.event_name == 'pull_request' && secrets.DEMO_PREVIEW_SUPABASE_URL || secrets.DEMO_PRODUCTION_SUPABASE_URL }}
            export NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ github.event_name == 'pull_request' && secrets.DEMO_PREVIEW_SUPABASE_ANON_KEY || secrets.DEMO_PRODUCTION_SUPABASE_ANON_KEY }}
            
            # Build and set output based on success
            if pnpm nx run playground:build; then
              echo "Build successful"
              echo "built=true" >> $GITHUB_OUTPUT
            else
              echo "Build failed"
              echo "built=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Playground not affected, skipping build"
            echo "built=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload playground artifact
        if: steps.playground_build.outputs.built == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: playground-dist
          path: examples/playground/.next
          retention-days: 7


# ────────────────────────────────── 2. PREVIEW DEPLOYS (PR) ───────────────────────────
  deploy-preview-playground:
    needs: build
    if: github.event_name == 'pull_request' && needs.build.outputs.playground-built == 'true'
    runs-on: ubuntu-latest
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID:    ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
    steps:
      - name: Debug build outputs
        run: |
          echo "Playground built: ${{ needs.build.outputs.playground-built }}"
          echo "Should deploy: ${{ github.event_name == 'pull_request' && needs.build.outputs.playground-built == 'true' }}"

      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            examples/playground/netlify.toml
          sparse-checkout-cone-mode: false

      - uses: actions/download-artifact@v4
        with: { name: playground-dist, path: examples/playground/.next }

      - run: |
          pnpm dlx netlify-cli@latest deploy \
            --dir=examples/playground \
            --alias=pr-${{ github.event.pull_request.number }} \
            --message="PR #${{ github.event.pull_request.number }}" \
            --functions=examples/playground/.netlify/functions \
            --site=$NETLIFY_SITE_ID
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  deploy-preview-website:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: '8.14.1' }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm nx run website:deploy:preview --skip-nx-cache

# ──────────────────────────────── 3. PRODUCTION DEPLOYS (main) ────────────────────────
  deploy-production-playground:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.outputs.playground-built == 'true'
    runs-on: ubuntu-latest
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID:    ${{ secrets.NETLIFY_PLAYGROUND_SITE_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            examples/playground/netlify.toml
          sparse-checkout-cone-mode: false

      - uses: actions/download-artifact@v4
        with: { name: playground-dist, path: examples/playground/.next }

      # Production deploy
      - run: |
          pnpm dlx netlify-cli@latest deploy \
            --prod \
            --dir=examples/playground \
            --message="Deploy from GitHub Actions (main)" \
            --functions=examples/playground/.netlify/functions \
            --site=$NETLIFY_SITE_ID
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  deploy-production-website:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with: { version: '8.14.1' }
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install --frozen-lockfile
      - run: pnpm nx run website:deploy --skip-nx-cache