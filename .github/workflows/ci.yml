# CI workflow - build and deploy pattern
name: ci-and-deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
      - '!changeset-release/**'

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

permissions:
  actions: read
  contents: read

jobs:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 1. BUILD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      # This enables task distribution via Nx Cloud
      # Run this command as early as possible, before dependencies are installed
      # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # Uncomment this line to enable task distribution
      # - run: pnpm dlx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: '1.45.2'

      - name: Install sqruff
        uses: quarylabs/install-sqruff-cli-action@main

      - name: Setup Atlas
        uses: ariga/setup-atlas@master
        with:
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Nx - capture commits SHAs
        uses: nrwl/nx-set-shas@v4

      # # Clear Nx cache before running affected commands
      # - name: Clear Nx cache
      #   run: pnpm exec nx reset
      #
      # # Ensure core migrations run and types are generated
      # - name: Ensure Supabase is reset with latest migrations
      #   run: |
      #     cd pkgs/core
      #     pnpm supabase stop --no-backup || true
      #     pnpm supabase start
      #     pnpm supabase db reset || true
      #     pnpm supabase gen types --local --schema pgflow --schema pgmq > src/database-types.ts

      # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # - run: pnpm exec nx-cloud record -- echo Hello World
      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      - name: Nx - run affected targets
        run: pnpm exec nx affected -t lint typecheck test build --parallel

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. DEPLOY PREVIEW (Pull Requests) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy-preview:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        site: [website]
    environment: preview
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      - uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract branch name
        id: extract_branch
        run: |
          # For PR events, use the head branch name
          BRANCH_NAME="${{ github.head_ref }}"
          # Sanitize branch name for Cloudflare (lowercase, replace special chars)
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/^-*//' | sed 's/-*$//')
          echo "branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
          echo "Preview will be deployed to: https://$SAFE_BRANCH.pgflow.pages.dev"

      - name: Deploy Preview for ${{ matrix.site }}
        run: pnpm exec nx run ${{ matrix.site }}:deploy:preview
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_BRANCH: ${{ steps.extract_branch.outputs.branch }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.extract_branch.outputs.branch }}';
            const previewUrl = `https://${branch}.pgflow.pages.dev`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview deployment ready!**\n\nðŸ”— Preview URL: ${previewUrl}\n\n_Note: It may take a few moments for the deployment to be fully available._`
            })

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 3. DEPLOY PRODUCTION (Main branch) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        site: [website]
    environment: production          # enables manual approval & secret scoping
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: '8.14.1'

      - uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy ${{ matrix.site }} to Production
        run: pnpm exec nx run ${{ matrix.site }}:deploy
        env:
          CLOUDFLARE_API_TOKEN:  ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}